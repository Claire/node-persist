{"google":"","body":"#node-persist\r\n##(localStorage on the server)\r\n\r\n###Super-easy (and fast) persistent data structures in Node.js, modeled after HTML5 localStorage\r\nNode-persist doesn't use a database. Instead, JSON documents are stored in the file system periodically for persistence. Because there is no network overhead and your data is just in-memory, node-persist is just about as fast as a database can get. Node-persist uses the HTML5 localStorage API, so it's easy to learn.\r\n\r\nThis is still a work in progress. Send pull requests please.\r\n\r\n##Install\r\nFirst, put 'persist.js' in your directory. Then,\r\n\r\n\tvar storage = require('./persist');\r\n\r\n##Basic Example\r\n\t//you must first call storage.init or storage.initSync\r\n\tstorage.init();\r\n\t\r\n\t//then start using it\r\n\tstorage.setItem('name','yourname');\r\n\tconsole.log(storage.getItem('name'));\r\n\t\r\n\tvar batman = {\r\n\t\tfirst: 'Bruce',\r\n\t\tlast: 'Wayne',\r\n\t\talias: 'Batman'\r\n\t};\r\n\t\r\n\tstorage.setItem('batman',batman);\r\n\tconsole.log(storage.getItem('batman').alias);\r\n\t\r\n##Run the examples:\r\n\tcd examples/examplename\r\n\tnode examplename.js\r\n\topen up localhost:8080\r\n\t\r\n##Options\r\nYou can pass init or initSync a hash options to customize the behavior of node-persist\r\n\t\r\n\tstorage.init({\r\n\t\t\tdir:'myDir', // The Directory to save documents\r\n\t\t\tinterval:6000, // Saving interval, in milliseconds\r\n\t\t\tstringify: myStringifyFunction,\r\n\t\t\tparse: myParsingFunction,\r\n\t\t\tencoding: 'utf8',\r\n\t\t\tlogging: false, //print storage logs,\r\n\t\t\tisInterval: true // turn off for fine-grained control\r\n\t});\r\n\t\r\n##Documentation\r\n###getItem(key)\r\nThis function will get a key from your database, and return its value, or undefined if it is not present.\r\n\t\r\n\tstorage.getItem('name');\r\n\tstorage.getItem('obj').key1;\r\n\tstorage.getItem('arr')[42];\r\n\r\n\r\n###setItem(key, value)\r\nThis function sets 'key' in your database to 'value'. It also sets a flag, notifying that 'key' has been changed and needs to be persisted in the next sweep. Because the flag must be set for the object to be persisted, it is best to use node-persist in a functional way, as shown below.\r\n\r\n\tstorage.setItem('fibonacci',[0,1,1,2,3,5,8]);\r\n\tstorage.setItem(42,'the answer to life, the universe, and everything.')\r\n\t\r\n\tvar batman = storage.getItem('batman');\r\n\tbatman.sidekick = 'Robin';\r\n\tstorage.setItem('batman',batman); //this ensures the object is persisted\r\n\t\r\n###removeItem(key)\r\nThis function removes key in the database if it is present, and immediately deletes it from the file system asynchronously.\r\n\r\n\tstorage.removeItem('me');\r\n\tstorage.removeItem(42);\r\n\r\n###clear()\r\nThis function removes all keys in the database, and immediately deletes all keys from the file system asynchronously.\r\n\r\n###key(n)\r\nThis function returns a key with index n in the database, or null if it is not present. The ordering of keys is not known to the user.\r\n\r\n###length()\r\nThis function returns the number of keys stored in the database.\t\r\n\t\r\n##Fine-grained control\r\nMake sure you set isInterval: false in the options hash.\r\n###persist(), persistSync()\r\nThese functions can be used to manually persist the database\r\n\r\n\t\tstorage.persist();\r\n\t\tstorage.persistSync();\r\n\r\n\r\n###persistKey(key), persistKeySync(key)\r\nThese functions manually persist 'key' within the database\r\n\r\n\t\tstorage.setItem('name','myname');\r\n\t\tstorage.persistKey('name'); \r\n\t\t\r\n\r\n###[Simon Last](http://simonlast.org)\t\t\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Super-easy persistent data structures in Node.js","name":"Node-persist"}